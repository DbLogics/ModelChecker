/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Starting;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Toolkit;
import java.sql.Array;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.prefs.Preferences;
import javax.swing.DefaultListModel;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;
import luck.Connect;
import luck.IFCBeam;
import luck.IFCColumn;
import luck.IFCSLAB;
import luck.IFCWall;

/**
 *
 * @author DataByte Logics
 */


public class Validation extends javax.swing.JInternalFrame {

    public class Item {

    private Float Position;
    private String Name;

    public Item(Float position, String name) {
        this.Position = position;
        this.Name = name;
    }

    public Float getPosiFloat() {
        return Position;
    }

    public void setPosition(Float position) {
        this.Position = position;
    }

    public String getName() {
        return Name;
    }

    public void setName(String name) {
        this.Name = name;
    }

    public String toString(){
        return this.Name;
    }
}
    /**
     * Creates new form Validation
     */
    JList<Item> stories=new JList<Item>();
    String FileId="";
    String Path="";
    ResultSet rs;
    ResultSet Seprs;
    ResultSetMetaData mt;
    Structural_Analysis.Connect c=new Structural_Analysis.Connect();
    DefaultListModel<Item>  listModel = new DefaultListModel<Item>();

    public Validation() {
        initComponents();
        getContentPane().setBackground(new Color(197,226,252));
        Preferences userPreferences = Preferences.userRoot();
        FileId = userPreferences.get("fileid","0");      
        c.getStorey(FileId);
        try
        {
        rs=c.DqlStatement();
       
                while(rs.next()!=false)
                        {
                           listModel.addElement(new Item(rs.getFloat("Position"), rs.getString("LevelName")));
                            drpStorey.addItem(rs.getString("LevelName"));
                        }
                stories = new JList(listModel);
                 String g="";
            
      
        }
        catch(Exception ex)
        {
             String g="";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        validationlabel = new javax.swing.JLabel();
        drpCheck = new javax.swing.JComboBox();
        validatebutton = new javax.swing.JButton();
        status = new javax.swing.JLabel();
        btnexit1 = new javax.swing.JButton();
        txtStorey = new javax.swing.JLabel();
        drpStorey = new javax.swing.JComboBox();

        setBackground(new java.awt.Color(197, 226, 252));
        setClosable(true);
        setIconifiable(true);
        setTitle("Validation");

        validationlabel.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        validationlabel.setText("Validation");

        drpCheck.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        drpCheck.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select Any Check", "Effective Height of Wall", "Effective Length of Wall", "Effective Thichness of Wall", "Selenderness Ratio" }));
        drpCheck.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                drpCheckItemStateChanged(evt);
            }
        });
        drpCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drpCheckActionPerformed(evt);
            }
        });

        validatebutton.setBackground(new java.awt.Color(102, 102, 102));
        validatebutton.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        validatebutton.setForeground(new java.awt.Color(0, 51, 204));
        validatebutton.setText("Validate");
        validatebutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validatebuttonActionPerformed(evt);
            }
        });

        status.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        status.setText("Status : Check Not Selected");
        status.setToolTipText("");

        btnexit1.setBackground(new java.awt.Color(102, 102, 102));
        btnexit1.setFont(new java.awt.Font("Poppins Medium", 0, 18)); // NOI18N
        btnexit1.setForeground(new java.awt.Color(0, 51, 204));
        btnexit1.setText("Close");
        btnexit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnexit1ActionPerformed(evt);
            }
        });

        txtStorey.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        txtStorey.setText("Storey");

        drpStorey.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        drpStorey.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select a Storey" }));
        drpStorey.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                drpStoreyItemStateChanged(evt);
            }
        });
        drpStorey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drpStoreyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtStorey, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(validationlabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drpCheck, 0, 438, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(validatebutton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnexit1)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(drpStorey, javax.swing.GroupLayout.Alignment.TRAILING, 0, 438, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validationlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drpCheck, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtStorey, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drpStorey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validatebutton)
                    .addComponent(btnexit1))
                .addGap(18, 18, 18)
                .addComponent(status)
                .addContainerGap(148, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void drpCheckItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_drpCheckItemStateChanged
        if(drpCheck.getSelectedIndex()==0)
        {
            status.setText("Status : Check not Selected");
        }
        else
        {
            if(drpStorey.getSelectedIndex()==0)
            {
                status.setText("Status : Storey not Selected");
            }
            else
            {
                status.setText("Status : Press Validate Button to proceed");
            }
             
        }
    }//GEN-LAST:event_drpCheckItemStateChanged

    private void validatebuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validatebuttonActionPerformed
       validatebutton.setEnabled(false);
        if(drpCheck.getSelectedIndex()==1)
               {
                   try {
                      for(int i=0;i<listModel.size();i++)
                      {
                          Item item=listModel.getElementAt(i);
                          String Val=(String)drpStorey.getSelectedItem();
                          String DVal=item.getName();
                          if(DVal.equals(Val))
                          {
                              c.getLowerSlab(item.getPosiFloat(),FileId);
                              rs=c.DqlStatement();
                              if(rs.next()!=false)
                              {
                                  Float Lower_Slab_Thickness=rs.getFloat("Depth");
                                  
                                  c.getUpperSlab(item.getPosiFloat(),FileId);
                                  rs=c.DqlStatement();
                                  
                                  if(rs.next()!=false)
                                  {
                                      Float Upper_Slab_Thickness=rs.getFloat("Depth");
                                      
                                      c.getWalls(item.getPosiFloat(),FileId);
                                      Seprs=c.DqlStatement();
                                      while(Seprs.next()!=false)
                                      {
                                          Float Start=0.0f;
                                          c.getLengthOfWall(Seprs.getString("GlobalId"), FileId);
                                          ResultSet lenres=c.DqlStatement();
                                          if(lenres.next()!=false)
                                          {
                                              Float Length_Of_Wall=lenres.getFloat("Length");
                                              Float Thickness_Of_Wall=Seprs.getFloat("Thickness");
                                              if(Length_Of_Wall>(4*Thickness_Of_Wall))
                                              {
                                                      if(Float.compare(item.getPosiFloat(),Start)==0)
                                                      {
                                                        Float Height=(Lower_Slab_Thickness/1000)+(Seprs.getFloat("Height")/1000)+((Upper_Slab_Thickness/1000)/2);
                                                        Double Effective_Height=0.75*Height;
                                                        String dataaaa="";                                          
                                                      }
                                                      else
                                                      {
                                                        Float Height=((Lower_Slab_Thickness/1000)/2)+(Seprs.getFloat("Height")/1000)+((Upper_Slab_Thickness/1000)/2);
                                                        Double Effective_Height=0.75*Height;
                                            
                                                      }      
                                              }
                                              else
                                              {
                                                  
                                              }
                                            
                                          }
                                          
                                      }
                                  }
                              }
                          }
                      }
                       status.setText("Status: Check Performed");
                   } catch (Exception ex) {
                       Logger.getLogger(MainWindowIfc.class.getName()).log(Level.SEVERE, null, ex);
                   }
               }
               else if(drpCheck.getSelectedIndex()==2)
               {
                  
               }
               else if (drpCheck.getSelectedIndex()==3)
               {
                  
               }
               else if(drpCheck.getSelectedIndex()==4)
               {
                  
               }
       
       JTable tab;
	JScrollPane sp;
	Vector content = new Vector();
	Vector header = new Vector();
       
	JPanel p1;
	JLabel l1;
         p1 = new JPanel();
         p1.setBounds(0,150,100,100);
		p1.setLayout(null);
                p1.setBackground(Color.LIGHT_GRAY);
		p1.setSize(800,400);
		l1 = new JLabel("Validation Summary");
		l1.setBounds(300,10, 200, 20);
		l1.setFont(new Font("Comic Sans Ms",Font.BOLD,14));
                //l1.setForeground(Color.WHITE);
		p1.add(l1);
                Connect c=new Connect();
                c.getReport();
        try {
            rs=c.DqlStatement();
            mt=rs.getMetaData();
            
            int count = mt.getColumnCount();
			for (int i = 1; i <= count; i++)
			{
				header.addElement(mt.getColumnName(i));
			}
				while (rs.next())
				{
					Vector row = new Vector(count);
					for (int i = 1; i <= count; i++)
					{
						row.addElement(rs.getObject(i));
					}
					content.addElement(row);
				}
                                
                                tab = new JTable(content,header);
		tab.setBackground(Color.BLUE);
		tab.setColumnSelectionAllowed(false);
		tab.setAutoscrolls(true);
		tab.setGridColor(Color.BLUE);
		tab.setFont(new Font("Monotype Corsiva", Font.PLAIN,12));
		tab.setForeground(Color.WHITE);
		

		tab.setCursor(Cursor.getSystemCustomCursor("TEXT_CURSOR"));
                tab.enable(false);
		TableColumn col;
		for (int i = 0; i < tab.getColumnCount(); i++)
		{
			col = tab.getColumnModel().getColumn(i);
                        col.sizeWidthToFit();
                        
		}
		sp = new JScrollPane(tab);
		
		sp.setBounds(200,50,350,170);
		
		sp.setAutoscrolls(true);
		sp.setVisible(true);
		p1.add(sp);
		this.add(p1);
		p1.setBackground(new Color(204,204,204));
		this.setVisible(true);
        }
        catch(Exception ex)
        {
            
        }
                
                
    }//GEN-LAST:event_validatebuttonActionPerformed

    private void btnexit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnexit1ActionPerformed
      if(JOptionPane.showConfirmDialog(this,"Do u Want to Exit this Application")==JOptionPane.OK_OPTION)
        {
            this.setVisible(false);
        }   // TODO add your handling code here:
    }//GEN-LAST:event_btnexit1ActionPerformed

    private void drpCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drpCheckActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drpCheckActionPerformed

    private void drpStoreyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_drpStoreyItemStateChanged
        if(drpCheck.getSelectedIndex()==0)
        {
            status.setText("Status : Check not Selected");
        }
        else
        {
            if(drpStorey.getSelectedIndex()==0)
            {
                status.setText("Status : Storey not Selected");
            }
            else
            {
                status.setText("Status : Press Validate Button to proceed");
            }
             
        }
    }//GEN-LAST:event_drpStoreyItemStateChanged

    private void drpStoreyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drpStoreyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_drpStoreyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnexit1;
    private javax.swing.JComboBox drpCheck;
    private javax.swing.JComboBox drpStorey;
    private javax.swing.JLabel status;
    private javax.swing.JLabel txtStorey;
    private javax.swing.JButton validatebutton;
    private javax.swing.JLabel validationlabel;
    // End of variables declaration//GEN-END:variables
}
